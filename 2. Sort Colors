https://leetcode.com/problems/sort-colors/description/

Bruteforce:
class Solution {
public:
    void sortColors(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        
    }
};
T.C. = o(nlogn)
S.C. = o(n)

Better:
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int count0=0,count1=0,count2=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]==0){
                count0++;
            }
            else if(nums[i]==1){
                count1++;
            }
            else if(nums[i]==2){
                count2++;
            }
        }
        for(int i=0;i<nums.size();i++){
            if(i<count0){
                nums[i]=0;
            }
            else if(i<count0+count1){
                nums[i]=1;
            }
            else{
                nums[i]=2;
            }
        }
    }
};
T.C. = o(n)
S.C. = o(1)

Optimal:
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low = 0;
        int high = nums.size()-1;
        int mid=0;
        while(mid<=high){
            if(nums[mid]==0){
                swap(nums[low],nums[mid]);
                low++;
                mid++;
            }
            else if(nums[mid]==1){
                mid++;
            }
            else if(nums[mid]==2){
                swap(nums[mid],nums[high]);
                high--;
            }
        }
        
    }
};
T.C. = o(n)
S.C. = o(1)
